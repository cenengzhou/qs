package com.gammon.qs.client.ui.window.mainSection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.gammon.qs.application.User;
import com.gammon.qs.client.controller.GlobalSectionController;
import com.gammon.qs.client.repository.RepackagingDetailRepositoryRemote;
import com.gammon.qs.client.repository.RepackagingDetailRepositoryRemoteAsync;
import com.gammon.qs.client.repository.UserAccessRightsRepositoryRemote;
import com.gammon.qs.client.repository.UserAccessRightsRepositoryRemoteAsync;
import com.gammon.qs.client.ui.GlobalMessageTicket;
import com.gammon.qs.client.ui.SessionTimeoutCheck;
import com.gammon.qs.client.ui.util.UIUtil;
import com.gammon.qs.shared.GlobalParameter;
import com.gammon.qs.shared.RoleSecurityFunctions;
import com.gammon.qs.wrapper.EmailMessage;
import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Document;
import com.google.gwt.dom.client.Element;
import com.google.gwt.dom.client.InputElement;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.rpc.ServiceDefTarget;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.MultiWordSuggestOracle;
import com.google.gwt.user.client.ui.SuggestBox;
import com.google.gwt.user.client.ui.TextBoxBase;
import com.gwtext.client.widgets.Button;
import com.gwtext.client.widgets.MessageBox;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.Window;
import com.gwtext.client.widgets.event.ButtonListenerAdapter;
import com.gwtext.client.widgets.form.FormPanel;
import com.gwtext.client.widgets.form.HtmlEditor;
import com.gwtext.client.widgets.form.Label;
import com.gwtext.client.widgets.form.TextField;
import com.gwtext.client.widgets.layout.FitLayout;
import com.gwtext.client.widgets.layout.HorizontalLayout;
import com.gwtext.client.widgets.layout.RowLayout;
import com.gwtext.client.widgets.layout.TableLayout;

public class SendRepackagingConfirmEmailWindow extends Window {
	private static final String SEND_REPACKAGING_CONFIRM_EMAIL_ID = "sendRepackagingConfirmEmailId";
	
	private Panel mainPanel;
	private Panel sendEmailPanel;
	private Panel sendEmailFormPanel;
	
	private Button sendEmailButton;
	private Button closeWindowButton;
	
	private TextField subjectField;
	private HtmlEditor textEditor;
	MultipleTextBox txt, cctxt;
	SuggestBox box = new SuggestBox();
	
	private MultiWordSuggestOracle oracle = new MultiWordSuggestOracle();
	
	private GlobalSectionController globalSectionController;
	@SuppressWarnings("unused")
	private GlobalMessageTicket globalMessageTicket;
	private RepackagingDetailRepositoryRemoteAsync repackagingDetailRepository;
	private UserAccessRightsRepositoryRemoteAsync userAccessRightsRepository;
	
	List<String> emailAddressList = null;
	EmailMessage emailMessage;
	
	public SendRepackagingConfirmEmailWindow(GlobalSectionController globalSectionController) {
		super();
		setModal(true);
		
		this.globalSectionController = globalSectionController;
		globalMessageTicket = new GlobalMessageTicket();
		
		// Initialize Repositories
		repackagingDetailRepository = (RepackagingDetailRepositoryRemoteAsync) GWT.create(RepackagingDetailRepositoryRemote.class);
		((ServiceDefTarget)repackagingDetailRepository).setServiceEntryPoint(GlobalParameter.REPACKAGING_DETAIL_REPOSITORY_URL);
		userAccessRightsRepository = (UserAccessRightsRepositoryRemoteAsync) GWT.create(UserAccessRightsRepositoryRemote.class);
		((ServiceDefTarget)userAccessRightsRepository).setServiceEntryPoint(GlobalParameter.USER_ACCESS_RIGHTS_REPOSITORY_URL);
		obtainRecipients();
		setupUI();
	}
	

	private void setupUI() {
		setTitle("Repackaging Confirmation Email");
		setPaddings(5);
		setWidth(660);
		setHeight(380);
		setLayout(new FitLayout());
		
		mainPanel = new Panel();
		mainPanel.setLayout(new RowLayout());
		mainPanel.setBorder(false);
		mainPanel.setId(SEND_REPACKAGING_CONFIRM_EMAIL_ID);

		setupSendEmailPanel();
		
		mainPanel.add(sendEmailPanel);
		
		Panel textPanel = new Panel();
		textPanel.setHeight(200);
		textPanel.setLayout(new FitLayout());
		textEditor = new HtmlEditor();
		textEditor.setValue("Dear Sir/Madam, </br></br>Please review and confirm the Repackaging of Job "+globalSectionController.getJob().getJobNumber()
				+". </br></br></br> --------------------------------------------------------------------------------</br>" 
				+"Please do not reply to this e-mail as it is auto-generated by the system.");

		textPanel.add(textEditor);
		
		mainPanel.add(textPanel);
		
		// Open Button
		sendEmailButton = new Button("Send");
		sendEmailButton.addListener(new ButtonListenerAdapter() {
			public void onClick(Button button, com.gwtext.client.core.EventObject e) {
				emailMessage = new EmailMessage();
				if(txt.getWholeText()!=null && txt.getWholeText().length()>0){
					String emailAddress = txt.getWholeText().trim();
					emailAddressList = Arrays.asList(emailAddress.split(";"));
					
					//trim the email list
					for (int i=0; i<emailAddressList.size(); i++)
						emailAddressList.set(i, emailAddressList.get(i).trim());
					
					emailMessage.setRecipients(emailAddressList);
				} else{
					MessageBox.alert("Please enter a recipient.");
					return;
				}
				
				//set Cc recipients
				if(cctxt.getWholeText()!=null && cctxt.getWholeText().length()>0){
					String emailAddress = cctxt.getWholeText().trim();
					List<String> emailCcAddressList = Arrays.asList(emailAddress.split(";"));
					
					//trim the email list
					for (int i=0; i<emailCcAddressList.size(); i++)
						emailCcAddressList.set(i, emailCcAddressList.get(i).trim());
					
					emailMessage.setCcRecipients(emailCcAddressList);
				}
				
				if(subjectField.getText()!=null && subjectField.getText().length()>0){
					emailMessage.setSubject(subjectField.getText());
				}else{
					MessageBox.alert("Please enter the email subject.");
					return;
				}
				
				if(textEditor.getRawValue()!=null && textEditor.getRawValue().length()>0){
					emailMessage.setContent(textEditor.getRawValue());
				}else{
					MessageBox.alert("The content cannot be blank.");
					return;
				}

				validateEmailAddressAndSendMail();
			};
		});
		addButton(sendEmailButton);

		// Close Button
		closeWindowButton = new Button("Close");
		closeWindowButton.addListener(new ButtonListenerAdapter() {
			public void onClick(Button button, com.gwtext.client.core.EventObject e) {
				SendRepackagingConfirmEmailWindow.this.close();
			};
		});
		addButton(closeWindowButton);

		add(mainPanel);

	}
	
	private void setupSendEmailPanel() {
		sendEmailPanel = new Panel();
		sendEmailPanel.setLayout(new HorizontalLayout(3));
		sendEmailPanel.setFrame(true);
		
		sendEmailFormPanel = new FormPanel();
		sendEmailFormPanel.setLayout(new TableLayout(2));
//		searchJobPanel.setFrame(true);
				
		Label toLabel = new Label("To :");
		toLabel.setCtCls("table-cell");
		sendEmailFormPanel.add(toLabel);
		sendEmailFormPanel.add(new AutoSuggestForm());
		
		Label ccLabel = new Label("Cc :");
		ccLabel.setCtCls("table-cell");
		sendEmailFormPanel.add(ccLabel);
		sendEmailFormPanel.add(new ccAutoSuggestForm());

//		searchJobPanel.add(this.searchRecipientsComboBox);
		
		Label subjectLabel = new Label("Subject : ");
		subjectLabel.setCtCls("table-cell");
		
		subjectField = new TextField("Subject", "subject", 600);
		subjectField.setValue("Request to review and confirm the Repackaging of Job "+globalSectionController.getJob().getJobNumber()+" by "+globalSectionController.getUser().getFullname());
		subjectField.disable();
		
		sendEmailFormPanel.add(subjectLabel);
		sendEmailFormPanel.add(this.subjectField);

		sendEmailPanel.add(sendEmailFormPanel);
	}
	
	private void obtainRecipients(){
		SessionTimeoutCheck.renewSessionTimer();
		repackagingDetailRepository.obtainRepackagingEmailRecipients(new AsyncCallback<List<User>>() {
			
			public void onSuccess(List<User> result) {
				oracle.clear();
				
				for (int i = 0; i < result.size(); i++) {
					oracle.add((String)result.get(i).getEmail());
				}
;			}
			
			public void onFailure(Throwable e) {
				UIUtil.throwException(e);
			}
		});
	}
	
    private class MultipleTextBox extends TextBoxBase {
        /**
         * Creates an empty multiple text box.
         */
        public MultipleTextBox() {
            this(Document.get().createTextInputElement(), "gwt-TextBox");
        }

        /**
         * This constructor may be used by subclasses to explicitly use an existing
         * element. This element must be an <input> element whose type is
         * 'text'.
         *
         * @param element the element to be used
         */
        protected MultipleTextBox(Element element) {
            super(element);
            assert InputElement.as(element).getType().equalsIgnoreCase("text");
        }

        MultipleTextBox(Element element, String styleName) {
            super(element);
            if (styleName != null) {
                setStyleName(styleName);
            }
        }

        @Override
        public String getText() {
            String wholeString = super.getText();
            String lastString = wholeString;
            if (wholeString != null && !wholeString.trim().equals("")) {
                int lastComma = wholeString.trim().lastIndexOf(";");
                if (lastComma > 0) {
                    lastString = wholeString.trim().substring(lastComma + 1);
                }
            }
            return lastString;
        }
        
        public String getWholeText() {
        	return super.getText();
        }

        @Override
        public void setText(String text) {
            String wholeString = super.getText();
            if (text != null && text.equals("")) {
                super.setText(text);
            } else {
                // Clean last text, to replace with new value, for example, if new
                // text is v.zaprudnevd@gmail.com:
                // "manuel@we-r-you.com, v" need to be replaced with:
                // "manuel@we-r-you.com, v.zaprudnevd@gmail.com, "
                if (wholeString != null) {
                    int lastComma = wholeString.trim().lastIndexOf(";");
                    if (lastComma > 0) {
                        wholeString = wholeString.trim().substring(0, lastComma);
                    } else {
                        wholeString = "";
                    }

                    if (!wholeString.trim().endsWith(";")
                            && !wholeString.trim().equals("")) {
                        wholeString = wholeString + "; ";
                    }

                    wholeString = wholeString + text + "; ";
                    super.setText(wholeString);
                }
            }
        }
    } 
    
    /**
     * Created by Henry Lai
     * 05-Nov-2014
     */
    private void validateEmailAddressAndSendMail(){
		//Get the username from the email address by referring table QS_APP_USER of QSADMIN
    	SessionTimeoutCheck.renewSessionTimer();
		repackagingDetailRepository.obtainUsernamesByEmails(emailAddressList, new AsyncCallback<List<String>>(){
			public void onSuccess(List<String> usernames) {
				for (int i=0; i<usernames.size(); i++){
					if(usernames.get(i)==null){
						MessageBox.alert("Invalid email address is found: "+emailAddressList.get(i));
						return;
					}
				}
				checkAccessRightsAndSendMail(usernames);
				return;
			}
			
			public void onFailure(Throwable e) {
				UIUtil.alert(e.getMessage());
			}
		});
		return;
    }
    
    /**
     * Created by Henry Lai
     * 05-Nov-2014
     */
    public void checkAccessRightsAndSendMail(List<String> usernames){
		//Check the access right
    	SessionTimeoutCheck.renewSessionTimer();
		userAccessRightsRepository.obtainAccessRightsByUserLists(usernames, RoleSecurityFunctions.B010101_REPACKAGING_DETAIL_WINDOW, new AsyncCallback<List<ArrayList<String>>>(){
			public void onSuccess(List<ArrayList<String>> accessRightsListReturned) {
				for(int x=0; x<accessRightsListReturned.size(); x++){
					if ((accessRightsListReturned.get(x) == null) || !(accessRightsListReturned.get(x).contains("ENABLE"))){
						MessageBox.alert("The recipient does not have the authority to Review & Confirm the newly repackaged Resource Summary: "+emailAddressList.get(x)+". Please fill in a MQS or Commercial Manager's email.");
						return;
					}
				}
				sendRepackagingConfirmationEmail(emailMessage);
				return;
			}
			
			public void onFailure(Throwable e) {
				UIUtil.alert(e.getMessage());
			}
		});
		return;
    }
    
    /**
     * Created by Henry Lai
     * 05-Nov-2014
     */
	private void sendRepackagingConfirmationEmail(EmailMessage emailMessage){
    	UIUtil.maskPanelById(SEND_REPACKAGING_CONFIRM_EMAIL_ID, "Sending", true);
    	SessionTimeoutCheck.renewSessionTimer();
		repackagingDetailRepository.sendRepackagingConfirmationEmail(emailMessage, new AsyncCallback<String>() {
			public void onSuccess(String result) {
				UIUtil.unmaskPanelById(SEND_REPACKAGING_CONFIRM_EMAIL_ID);
				if(result==null){
					MessageBox.alert("Email is sent successfully.");
					SendRepackagingConfirmEmailWindow.this.close();
				}else
					MessageBox.alert(result);
			}
			public void onFailure(Throwable caught) {
				UIUtil.unmaskPanelById(SEND_REPACKAGING_CONFIRM_EMAIL_ID);
			}
		});
    }

    private class AutoSuggestForm extends Composite {
        FlowPanel form;
        
        protected AutoSuggestForm() {
            form = new FlowPanel();
            form.removeFromParent();
            initWidget(form);

            txt = new MultipleTextBox();
            txt.setWidth("600");
            txt.setStyleName("table-cell");
            	
            box = new SuggestBox(oracle, txt);
            box.isVisible();
            
            
            box.setAnimationEnabled(true);

            form.add(box);

        }
    }
    
    /**
     * @author henrycslai
     * Created on 05-Nov-2014
     */
    private class ccAutoSuggestForm extends Composite {
        FlowPanel form;
        
        protected ccAutoSuggestForm() {
            form = new FlowPanel();
            form.removeFromParent();
            initWidget(form);

            cctxt = new MultipleTextBox();
            cctxt.setWidth("600");
            cctxt.setStyleName("table-cell");
            	
            box = new SuggestBox(oracle, cctxt);
            box.isVisible();
            
            
            box.setAnimationEnabled(true);

            form.add(box);

        }
    }
}

